---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: gitlab-ee
  namespace: monitoring
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: doppler-home-ops
  target:
    name: gitlab-ee-secret
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        GITLAB_OMNIBUS_CONFIG: |
          # nginx['enable'] = false
          nginx['listen_port'] = 80;
          nginx['listen_https'] = false;
          # gitlab_workhorse['listen_network'] = 'tcp'
          # gitlab_workhorse['listen_addr'] = '0.0.0.0:80'
          external_url 'https://${HOSTNAME}/';
          gitlab_rails['initial_root_password'] = '{{ .gitlab_initial_root_password }}';
          gitlab_rails['gitlab_signup_enabled'] = true;
          gitlab_rails['monitoring_whitelist'] = ['127.0.0.0/8', '::1/128', '10.42.0.0/16', '192.168.12.0/24', '192.168.14.0/24']
          gitlab_rails['omniauth_enabled'] = true
          # gitlab_rails['omniauth_auto_sign_in_with_provider'] = 'openid_connect'
          gitlab_rails['omniauth_allow_single_sign_on'] = ['openid_connect']
          gitlab_rails['omniauth_sync_email_from_provider'] = 'openid_connect'
          gitlab_rails['omniauth_sync_profile_from_provider'] = ['openid_connect']
          gitlab_rails['omniauth_sync_profile_attributes'] = ['email']
          gitlab_rails['omniauth_block_auto_created_users'] = false
          gitlab_rails['omniauth_auto_link_user'] = ['openid_connect']
          gitlab_rails['omniauth_providers'] = [
            {
              name: "openid_connect", # do not change this parameter
              label: "Authentik", # optional label for login button, defaults to "Openid Connect"
              args: {
                name: "openid_connect",
                scope: ["openid","profile","email"],
                response_type: "code",
                issuer: "https://authentik.${SECRET_DOMAIN}/application/o/gitlab-ee/",
                discovery: true,
                client_auth_method: "query",
                uid_field: "uid",
                send_scope_to_token_endpoint: "false",
                pkce: true,
                client_options: {
                  identifier: "PBTHWZ3r4YjZF8NqtIEVkVjYRm5ncCT5yKzDG6Ia",
                  secret: "{{ .gitlab_oauth2_client_secret }}",
                  redirect_uri: "https://git.${SECRET_DOMAIN}/users/auth/openid_connect/callback"
                }
              }
            }
          ]
          gitlab_rails['ldap_enabled'] = false;
          # manage_storage_directories['manage_etc'] = false;
          # manage_storage_directories['enable'] = false
          postgresql['enable'] = true;
          # gitlab_rails['db_adapter'] = 'postgresql'
          # gitlab_rails['db_encoding'] = 'utf8'
          # gitlab_rails['db_host'] = ENV['DB_HOST'];
          # gitlab_rails['db_port'] = ENV['DB_PORT'];
          # gitlab_rails['db_username'] = ENV['DB_USER'];
          # gitlab_rails['db_password'] = ENV['DB_PASSWORD'];
          # gitlab_rails['db_database'] = ENV['DB_DATABASE'];
          redis['enable'] = false;
          gitlab_rails['redis_host'] = ENV['REDIS_HOST'];
          gitlab_rails['redis_port'] = ENV['REDIS_HOST_PORT'];
          gitlab_rails['redis_password'] = ENV['REDIS_HOST_PASSWORD'];
          gitlab_rails['packages_enabled'] = true
          gitlab_rails['packages_storage_path'] = "/mnt/packages"
          #registry_external_url 'https://registry-git.${SECRET_DOMAIN}'
          #registry['enable'] = true
          #registry['registry_http_addr'] = "0.0.0.0:5000"
          #registry_nginx['enable'] = false
          logging['logrotate_frequency'] = "daily" # rotate logs daily
          logging['logrotate_maxsize'] = nil # logs will be rotated when they grow bigger than size specified for `maxsize`, even before the specified time interval (daily, weekly, monthly, or yearly)
          logging['logrotate_size'] = nil # do not rotate by size by default
          logging['logrotate_rotate'] = 30 # keep 30 rotated logs
          logging['logrotate_compress'] = "compress" # see 'man logrotate'
          logging['logrotate_method'] = "copytruncate" # see 'man logrotate'
          logging['logrotate_postrotate'] = nil # no postrotate command by default
          logging['logrotate_dateformat'] = nil # use date extensions for rotated files rather than numbers e.g. a value of "-%Y-%m-%d" would give rotated files like production.log-2016-03-09.gz
          prometheus['enable'] = false;
          alertmanager['enable'] = false;
          # disable prometheus exporters
          node_exporter['enable'] = false;
          redis_exporter['enable'] = false;
          postgres_exporter['enable'] = false;
          pgbouncer_exporter['enable'] = false;
          gitlab_exporter['enable'] = false
          # reduce memory usage:
          puma['worker_processes'] = 0;
          sidekiq['concurrency'] = 10;
          prometheus_monitoring['enable'] = false
          gitlab_rails['env'] = {
            'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
          }
          gitaly['configuration'] = {
            concurrency: [
              {
                'rpc' => "/gitaly.SmartHTTPService/PostReceivePack",
                'max_per_repo' => 3,
              }, {
                   'rpc' => "/gitaly.SSHService/SSHUploadPack",
                   'max_per_repo' => 3,
              },
            ],
            # see https://gitlab.com/gitlab-org/gitaly/-/issues/4025
            # cgroups: {
            #   repositories: {
            #     count: 2,
            #   },
            #   mountpoint: '/sys/fs/cgroup',
            #   hierarchy_root: 'gitaly',
            #   memory_bytes: 500000,
            #   cpu_shares: 512,
            # },
          }
          gitaly['env'] = {
            'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000',
            'GITALY_COMMAND_SPAWN_MAX_PARALLEL' => '2'
          }

  dataFrom:
    - extract:
        key: GITLAB_EE
      rewrite:
        - regexp:
            source: "(.*)"
            target: "gitlab_$1"
